library(GSplicing)
help(gsplicing)
library(GSplicing)
help(gsplicing)
library(GSplicing)
help(gsplicing)
library(GSplicing)
help(gsplicing)
gsplicing
?gsplicing
library(GSplicing)
?gsplicing
library(GSplicing)
?gsplicing
library(GSplicing)
?gsplicing
library(GSplicing)
?gsplicing
devtools::document()
?gsplicing
load("trim32.rda")
## Load the trim32.rda in the file
load("C:\\Users\\admin\\OneDrive\\study\\统计方法\\统计计算（研究生）\\大作业\\trim32.rda")
t <- 2000
z <- apply(x, 2, function(x) bcor(x, y))
id <- which(z >= sort(z, decreasing = T)[t])
temp <- x[, id]
library(GSplicing)
library(grpreg)
library(splines)
library(Ball)
t <- 2000
z <- apply(x, 2, function(x) bcor(x, y))
id <- which(z >= sort(z, decreasing = T)[t])
temp <- x[, id]
X <- ns(temp[, 1], df = 5)
for (i in 2:ncol(temp)) {
X <- cbind(X, ns(temp[, i], df = 5))
}
group = rep(1:ncol(temp), each = 5)
## The default settings of the state-of-the-art methods : Group lasso and Group MCP
grp1 <- function(x, y, group, penalty){
fit <- grpreg(x, y, group = group, penalty = penalty, lambda.min = 0.05, nlambda = 100, eps = 1e-4)
lam = grpreg::select(fit, crit="BIC")$lambda
return(list(model = fit, lam = lam))
}
grp2 <- function(x, y, group, penalty){
fit <- grpreg(x, y, group = group, penalty = penalty, lambda.min = 0.01, nlambda = 100, eps = 1e-4, gmax = 8)
lam = grpreg::select(fit, crit="BIC", df.method = "active")$lambda
return(list(model = fit, lam = lam))
}
i=101
set.seed(i)
print(i)
ind <- sample(1:120, 100)
m <- 120-length(ind)
fit1 <- gsplicing(X[ind, ], y[ind], group = group, T.list = 1:10, tune = "GIC"))
fit1 <- gsplicing(X[ind, ], y[ind], group = group, T.list = 1:10, tune = "GIC")
View(fit1)
?Rcpp::compileAttributes()
View(Rcpp::compileAttributes())
View(Rcpp::compileAttributes
)
library(GSplicing)
library(GSplicing)
help("gsplicing")
help(gsplicing)
help(GSplicing::gsplicing)
devtools::document()
help(gsplicing)
help(lm)
devtools::document()
help(gsplicing)
devtools::document()
help(gsplicing)
devtools::document()
help(gsplicing)
devtools::document()
help(gsplicing)
devtools::document()
help(gsplicing)
devtools::document()
help(gsplicing)
devtools::document()
devtools::document()
help(gsplicing)
devtools::document()
help(gsplicing)
devtools::document()
help(gsplicing)
install.packages("mathjaxr")
preview_rd('man\gsplicing.Rd')
preview_rd('man\\gsplicing.Rd')
library(mathjaxr)
preview_rd('man\\gsplicing.Rd')
preview_rd('man\\gsplicing')
preview_rd("someRdfile")
preview_rd('gsplicing')
help(gsplicing)
devtools::document()
help(gsplicing)
# temp <- x
X <- ns(temp[, 1], df = 5)
library(GSplicing)
library(grpreg)
library(splines)
library(Ball)
t <- 2000
z <- apply(x, 2, function(x) bcor(x, y))
load("D:/SC2S/group L0/本科论文/simu_thesis/realdata/trim32.rda")
## Load the trim32.rda in the file
load("C:\\Users\\admin\\OneDrive\\study\\统计方法\\统计计算（研究生）\\大作业\\trim32.rda")
View(x)
## Select a subset of 2000 genes by a SIS procedure
t <- 2000
z <- apply(x, 2, function(x) bcor(x, y))
id <- which(z >= sort(z, decreasing = T)[t])
temp <- x[, id]
## Use a five-term natural cubic splines to expand each gene
X <- ns(temp[, 1], df = 5)
View(X)
View(X)
install.packages("abess")
library(abess)
n <- 100
p <- 20
T.list <- 3
dataset <- generate.data(n, p, support.size = T.list)
View(dataset)
?generate.data
View(generate.data)
n <- 100
p <- 20
set.seed(999)
X <- matrix(rnorm(n), ncol = p)
n <- 100
p <- 300
set.seed(999)
X <- matrix(rnorm(n*p), ncol = p)
devtools::document()
help(gspling)
help(gsplicing)
roxygen2::roxy_tag_rd()
library(roxygen2)
?roxy_tag_rd
devtools::install_github("tjmahr/WrapRmd")
roxygen2::roxygenize(package.dir = ".")
devtools::install_github("tjmahr/WrapRmd")
library(GSplicing)
?gsplicing
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
library(GSplicing)
n <- 200
J <- 100
k <- 5
model.size <- 5
data <- generate.group(n, J, k, model.size)
str(data)
fit <- gsplicing(data$x, data$y, data$group)
View(fit)
fit$best_group
data$true.group
any(fit$best_group != data$true.group)
roxygen2::roxygenize(package.dir = ".")
library(GSplicing)
?generate.group
roxygen2::roxygenize(package.dir = ".")
library(GSplicing)
?generate.group
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
library(GSplicing)
library(GSplicing)
?gsplicing
?generate.group
roxygen2::roxygenize(package.dir = ".")
library(GSplicing)
?generate.group
rm(list = ls())
library(GSplicing)
library(grpreg)
library(splines)
library(Ball)
load("D:/SC2S/group L0/本科论文/simu_thesis/realdata/trim32.rda")
t <- 2000
z <- apply(x, 2, function(x) bcor(x, y))
id <- which(z >= sort(z, decreasing = T)[t])
temp <- x[, id]
# temp <- x
X <- ns(temp[, 1], df = 5)
for (i in 2:ncol(temp)) {
X <- cbind(X, ns(temp[, i], df = 5))
}
group = rep(1:ncol(temp), each = 5)
grp1 <- function(x, y, group, penalty){
fit <- grpreg(x, y, group = group, penalty = penalty, lambda.min = 0.05, nlambda = 50, eps = 1e-4)
lam = grpreg::select(fit, crit="BIC")$lambda
return(list(model = fit, lam = lam))
}
grp2 <- function(x, y, group, penalty){
fit <- grpreg(x, y, group = group, penalty = penalty, lambda.min = 0.01, nlambda = 50, eps = 1e-4, gmax = 8)
lam = grpreg::select(fit, crit="BIC", df.method = "active")$lambda
return(list(model = fit, lam = lam))
}
ind <- sample(1:120, 100)
m <- 120-length(ind)
fit1 <- gsplicing(X[ind, ], y[ind], group = group, T.list = 1:10, tune = "GIC")
library(GSplicing)
fit1 <- gsplicing(X[ind, ], y[ind], group = group, T.list = 1:10, tune = "GIC")
library(GSplicing)
fit1 <- gsplicing(X[ind, ], y[ind], group = group, T.list = 1:10, tune = "GIC")
roxygen2::roxygenize(package.dir = ".")
library(GSplicing)
library(GSplicing)
fit1 <- gsplicing(X[ind, ], y[ind], group = group, T.list = 1:10, tune = "GIC")
library(GSplicing)
fit1 <- gsplicing(X[ind, ], y[ind], group = group, T.list = 1:10, tune = "GIC")
fit1 <- gsplicing(X[ind, ], y[ind], group = group, T.list = 1:10, tune = "GIC")
library(GSplicing)
fit1 <- gsplicing(X[ind, ], y[ind], group = group, T.list = 1:10, tune = "GIC")
library(GSplicing)
fit1 <- gsplicing(X[ind, ], y[ind], group = group, T.list = 1:10, tune = "GIC")
library(GSplicing)
fit1 <- gsplicing(X[ind, ], y[ind], group = group, T.list = 1:10, tune = "GIC")
library(GSplicing)
fit1 <- gsplicing(X[ind, ], y[ind], group = group, T.list = 1:10, tune = "GIC")
